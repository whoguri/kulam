generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-3.0.x", "rhel-openssl-1.0.x"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onUpdate: NoAction, onDelete: NoAction)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

enum UserStatus {
  active
  inactive
}

enum Role {
  tbd
  admin
  user
  advertiser
}

model User {
  id            String     @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  status        UserStatus @default(active)
  role          Role       @default(tbd)
  registerOn    DateTime?  @default(now())
  lastLogin     DateTime?
  socialId      String?
  phone         String?
  password      String?
  orgPassword   String?
  city          String?
  userName      String?
  loginType     String?
  addedBy       String?

  balance Float? @default(0.0)
  total   Float? @default(0.0)

  referralCode String? @unique
  referredBy   String? @db.ObjectId

  referredByUser User?  @relation("UserToReferrals", fields: [referredBy], references: [id], onDelete: NoAction, onUpdate: NoAction)
  referrals      User[] @relation("UserToReferrals")

  accounts      Account[]
  sessions      Session[]
  deals         Deal[]
  discounts     Discount[]
  answer        Answer[]
  payLogs       PayLog[]
  subscriptions Subscription[]
}

model Deal {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  image        String?
  amount       Float
  description  String
  createdAt    DateTime @default(now())
  advertiserId String?  @db.ObjectId
  advertiser   User?    @relation(fields: [advertiserId], references: [id])
}

model Discount {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  name         String
  amount       Float
  image        String?
  description  String
  createdAt    DateTime @default(now())
  advertiserId String?  @db.ObjectId
  advertiser   User?    @relation(fields: [advertiserId], references: [id])
}

enum AC_TYPE {
  HIRING
  SERVICES
  WEEKLY_POST
}

model AppContent {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  type        AC_TYPE  @unique
  description String
  createdAt   DateTime @default(now())
}

model Poll {
  id       String    @id @default(auto()) @map("_id") @db.ObjectId
  question String
  date     DateTime? @default(now())
  options  String[]
  answer   Answer[]
}

model Answer {
  id     String @id @default(auto()) @map("_id") @db.ObjectId
  option String
  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id])
  pollId String @db.ObjectId
  poll   Poll   @relation(fields: [pollId], references: [id])
}

enum PayType {
  WITHDRAW
  EARN
}

model PayLog {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  userId     String   @db.ObjectId
  user       User     @relation(fields: [userId], references: [id])
  fromUserId String
  type       PayType
  amount     Float
  date       DateTime
  details    String?
}

enum SubscriptionType {
  FREE
  MONTHLY
  YEARLY
}

model Subscription {
  id           String           @id @default(auto()) @map("_id") @db.ObjectId
  userId       String           @db.ObjectId
  user         User             @relation(fields: [userId], references: [id])
  amount       Float
  type         SubscriptionType
  date         DateTime
  expiry       DateTime
  isCanceled   Boolean          @default(false)
  isAutoRenew  Boolean
  paymentToken String?
  isManual     Boolean
}

model Setting {
  id          String @id @default(auto()) @map("_id") @db.ObjectId
  v           Int    @unique
  amountMonth Float
  amountYear  Float
  gen_1       Int
  gen_2       Int
  gen_3       Int

  gen_1_p Float
  gen_2_p Float
  gen_3_p Float
}
